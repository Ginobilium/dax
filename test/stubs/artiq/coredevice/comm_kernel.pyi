import typing
import enum

__all__ = ['Request', 'Reply', 'UnsupportedDevice', 'LoadError', 'RPCReturnValueError', 'RPCKeyword',
           'CommKernelDummy', 'CommKernel']


class Request(enum.Enum):
    SystemInfo = ...
    LoadKernel = ...
    RunKernel = ...
    RPCReply = ...
    RPCException = ...


class Reply(enum.Enum):
    SystemInfo = ...
    LoadCompleted = ...
    LoadFailed = ...
    KernelFinished = ...
    KernelStartupFailed = ...
    KernelException = ...
    RPCRequest = ...
    WatchdogExpired = ...
    ClockFailure = ...


class UnsupportedDevice(Exception):
    ...


class LoadError(Exception):
    ...


class RPCReturnValueError(ValueError):
    ...


RPCKeyword = ...


class CommKernelDummy:
    def __init__(self) -> None:
        ...

    def load(self, kernel_library: typing.Any) -> None:
        ...

    def run(self) -> None:
        ...

    def serve(self, embedding_map: typing.Any, symbolizer: typing.Any, demangler: typing.Any) -> None:
        ...

    def check_system_info(self) -> None:
        ...


class CommKernel:
    warned_of_mismatch = ...

    def __init__(self, host, port=1381):
        self.host = ...
        self.port = ...

    def open(self, **kwargs):
        ...

    def close(self):
        ...

    def read(self, length):
        ...

    def write(self, data):
        ...

    def reset_session(self):
        ...

    def check_system_info(self):
        ...

    def load(self, kernel_library):
        ...

    def run(self):
        ...

    def serve(self, embedding_map, symbolizer, demangler):
        ...
